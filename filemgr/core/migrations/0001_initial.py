# Generated by Django 4.1.7 on 2023-03-16 14:51

import core.services.strings.strings_service
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import json.encoder
import re
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=32, verbose_name='Username of the user')),
                ('system_name', models.CharField(max_length=255, verbose_name='System name of the user')),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('registered_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('last_activity_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Last activity registered by the user in the system')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Record last update timestamp')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('AMAZON_S3', 'Amazon S3'), ('LOCAL', 'Local')], max_length=10, null=True)),
                ('credentials', models.JSONField(encoder=json.encoder.JSONEncoder, max_length=1024, verbose_name='JSON containing the credentials used for connection')),
                ('media_convert_configuration', models.JSONField(encoder=json.encoder.JSONEncoder, max_length=1024, null=True, verbose_name='JSON containing the configuration used for converting media files')),
            ],
        ),
        migrations.CreateModel(
            name='StorageFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('signature_key', models.CharField(default=core.services.strings.strings_service.StringsService.generate_random_encoded_string, max_length=64)),
                ('name', models.CharField(max_length=255, null=True, verbose_name='A name for the file')),
                ('status', models.CharField(choices=[('NOT_UPLOADED', 'The file upload has not started yet.'), ('UPLOADING', 'The file is being uploaded.'), ('UPLOADED', 'The file was uploaded and is waiting to enter the processing queue (or skipped).'), ('QUEUED', 'The file needs post processing and is waiting in the queue.'), ('PROCESSING', 'The file is being post processed.'), ('PUBLISHED', 'The file upload and post processing was completed and the file is ready.'), ('DELETED', 'The file was deleted.'), ('ERROR', 'An error occurred during one of the steps.')], default='NOT_UPLOADED', max_length=50)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Public'), ('SYSTEM', 'System'), ('USER', 'User')], default='SYSTEM', max_length=50)),
                ('size', models.BigIntegerField(default=0, verbose_name='File size in bytes')),
                ('hash', models.CharField(max_length=255, null=True, verbose_name='Hash of the processed file')),
                ('extension', models.CharField(max_length=16, null=True, verbose_name='Extension of the file')),
                ('exif_metadata', models.JSONField(default=dict, null=True, verbose_name='Dict with the file exif metadata')),
                ('custom_metadata', models.JSONField(default=dict, null=True, verbose_name='Dict with the metadata of the integrated system')),
                ('origin', models.CharField(choices=[('LOCAL', 'Local'), ('WEB', 'Web'), ('SYSTEM', 'System'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', max_length=255)),
                ('original_path', models.CharField(max_length=1024, null=True, verbose_name='Either the original URL of the file (if remotely downloaded) or the file path (if uploaded)')),
                ('real_path', models.CharField(max_length=1024, null=True, validators=[django.core.validators.RegexValidator(code='invalid_filepath', flags=re.RegexFlag['UNICODE'], message='The informed path contains invalid characters. Please use only the set: A-Za-z0-9_-./', regex='^\\/?([\\w\\.\\_-]+\\/)*[\\w\\.\\_-]+$')], verbose_name='The real remote filepath of the stored file')),
                ('virtual_path', models.CharField(max_length=1024, null=True, validators=[django.core.validators.RegexValidator(code='invalid_filepath', flags=re.RegexFlag['UNICODE'], message='The informed path contains invalid characters. Please use only the set: A-Za-z0-9_-./', regex='^\\/?([\\w\\.\\_-]+\\/)*[\\w\\.\\_-]+$')], verbose_name='The virtual remote filepath of the stored file')),
                ('available', models.BooleanField(default=True, verbose_name='If the file is remotely available')),
                ('excluded', models.BooleanField(default=False, verbose_name='If the file was marked as excluded in the interface')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='storage_file_owner', to=settings.AUTH_USER_MODEL)),
                ('storage', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.storage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StorageFileMimeType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mime_type', models.CharField(max_length=255, unique=True)),
                ('generic_type', models.CharField(choices=[('TEXT', 'Text'), ('FONT', 'Font'), ('CODE', 'Code'), ('EXECUTABLE', 'Executable'), ('AUDIO', 'Audio'), ('IMAGE', 'Image'), ('VIDEO', 'Video'), ('COMPRESSED', 'Compressed'), ('DOCUMENT', 'Document'), ('BINARY', 'Binary'), ('OTHER', 'Other')], max_length=50, null=True)),
                ('description', models.CharField(max_length=255, null=True, verbose_name='Description of the mime-type')),
                ('extensions', models.CharField(max_length=255, null=True, verbose_name='Comma-separated list of the extensions of this mime (eg.: csv,xls,xlsx)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StorageMedia',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('title', models.CharField(max_length=255, null=True)),
                ('type', models.CharField(choices=[('DOCUMENT', 'The media item is a document.'), ('IMAGE', 'The media item is an image.'), ('VIDEO', 'The media item is a video.')], max_length=64, verbose_name='The type of the media item')),
                ('description', models.TextField(max_length=65535, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('storage_file', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='media_file', to='core.storagefile')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StorageMediaImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('focal_length', models.FloatField(null=True, verbose_name='Focal length of the lenses in millimeters')),
                ('aperture', models.CharField(max_length=255, null=True)),
                ('flash_fired', models.BooleanField(null=True)),
                ('iso', models.PositiveIntegerField(null=True)),
                ('orientation_angle', models.IntegerField(null=True)),
                ('is_flipped', models.BooleanField(null=True)),
                ('exposition', models.CharField(max_length=255, null=True)),
                ('datetime_taken', models.CharField(max_length=255, null=True)),
                ('camera_manufacturer', models.CharField(max_length=255, null=True)),
                ('camera_model', models.CharField(max_length=255, null=True)),
                ('exif_image_height', models.IntegerField(null=True)),
                ('exif_image_width', models.IntegerField(null=True)),
                ('size_tag', models.CharField(choices=[('SIZE_8K', '8K (min 8192x5472 px @ 3:2, 45 Megapixels)'), ('SIZE_4K', '4K (min 4096x2752 px @ 3:2, 11 Megapixels)'), ('SIZE_3K', '3K (min 3200x2144 px @ 3:2, 6.9 Megapixels)'), ('SIZE_2K', '2K (min 2048x1376 px @ 3:2, 2.8 Megapixels)'), ('SIZE_1K', '1K (min 1280x864 px @ 3:2, 1.1 Megapixels)'), ('SIZE_VGA', 'VGA (min 800x600 px @ 4:3, <1 Megapixel)'), ('SIZE_THUMB_LARGE', 'Large Thumbnail [4:3] (960×720 px)'), ('SIZE_THUMB_MEDIUM', 'Medium Thumbnail [4:3] (480×360 px)'), ('SIZE_THUMB_SMALL', 'Small Thumbnail [4:3] (240x180 px)')], max_length=64, null=True, verbose_name='Biggest size tag of the media item')),
                ('height', models.PositiveIntegerField(null=True, verbose_name='Height of the media item')),
                ('width', models.PositiveIntegerField(null=True, verbose_name='Width of the media item')),
                ('megapixels', models.DecimalField(decimal_places=4, max_digits=7, null=True, verbose_name='Total millions of pixels (h x w) of the image')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('media', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.storagemedia')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(editable=False, max_length=255, unique=True, verbose_name='Token used to login (from uServer-Auth)')),
                ('issued_at', models.DateTimeField(editable=False, verbose_name='Date when the token was issued by uServer-Auth')),
                ('expires_at', models.DateTimeField(editable=False, verbose_name='Date when the token expires (defined by uServer-Auth)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date when the token was registered for use by the serivice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User that has the token')),
            ],
        ),
        migrations.CreateModel(
            name='StorageUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('may_write', models.BooleanField(default=False, verbose_name='Storage write permission')),
                ('may_read', models.BooleanField(default=True, verbose_name='Storage read permission')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('storage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.storage')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StorageMediaVideo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('fps', models.IntegerField(null=True, verbose_name='Framerate (frames per second) of the video')),
                ('duration', models.DurationField(null=True, verbose_name='Duration of the video')),
                ('size_tag', models.CharField(choices=[('SIZE_8K', '8K (min 8192x5472 px @ 3:2, 45 Megapixels)'), ('SIZE_4K', '4K (min 4096x2752 px @ 3:2, 11 Megapixels)'), ('SIZE_3K', '3K (min 3200x2144 px @ 3:2, 6.9 Megapixels)'), ('SIZE_2K', '2K (min 2048x1376 px @ 3:2, 2.8 Megapixels)'), ('SIZE_1K', '1K (min 1280x864 px @ 3:2, 1.1 Megapixels)'), ('SIZE_VGA', 'VGA (min 800x600 px @ 4:3, <1 Megapixel)'), ('SIZE_THUMB_LARGE', 'Large Thumbnail [4:3] (960×720 px)'), ('SIZE_THUMB_MEDIUM', 'Medium Thumbnail [4:3] (480×360 px)'), ('SIZE_THUMB_SMALL', 'Small Thumbnail [4:3] (240x180 px)')], max_length=64, null=True, verbose_name='Biggest size tag of the media item')),
                ('height', models.PositiveIntegerField(null=True, verbose_name='Height of the raw media item')),
                ('width', models.PositiveIntegerField(null=True, verbose_name='Width of the raw media item')),
                ('megapixels', models.DecimalField(decimal_places=4, max_digits=7, null=True, verbose_name='Total millions of pixels (h x w) of each frame of the video')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('media', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.storagemedia')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StorageMediaThumbnail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('size_tag', models.CharField(choices=[('SIZE_8K', '8K (min 8192x5472 px @ 3:2, 45 Megapixels)'), ('SIZE_4K', '4K (min 4096x2752 px @ 3:2, 11 Megapixels)'), ('SIZE_3K', '3K (min 3200x2144 px @ 3:2, 6.9 Megapixels)'), ('SIZE_2K', '2K (min 2048x1376 px @ 3:2, 2.8 Megapixels)'), ('SIZE_1K', '1K (min 1280x864 px @ 3:2, 1.1 Megapixels)'), ('SIZE_VGA', 'VGA (min 800x600 px @ 4:3, <1 Megapixel)'), ('SIZE_THUMB_LARGE', 'Large Thumbnail [4:3] (960×720 px)'), ('SIZE_THUMB_MEDIUM', 'Medium Thumbnail [4:3] (480×360 px)'), ('SIZE_THUMB_SMALL', 'Small Thumbnail [4:3] (240x180 px)')], max_length=64, null=True, verbose_name='The size of the thumbnail.')),
                ('height', models.PositiveIntegerField(null=True, verbose_name='Height of the sized media item')),
                ('width', models.PositiveIntegerField(null=True, verbose_name='Width of the sized media item')),
                ('megapixels', models.DecimalField(decimal_places=4, max_digits=7, null=True, verbose_name='Total millions of pixels (h x w) of the image')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('media', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='thumbnails', to='core.storagemedia')),
                ('storage_file', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.storagefile')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StorageMediaImageSized',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('size_tag', models.CharField(choices=[('SIZE_8K', '8K (min 8192x5472 px @ 3:2, 45 Megapixels)'), ('SIZE_4K', '4K (min 4096x2752 px @ 3:2, 11 Megapixels)'), ('SIZE_3K', '3K (min 3200x2144 px @ 3:2, 6.9 Megapixels)'), ('SIZE_2K', '2K (min 2048x1376 px @ 3:2, 2.8 Megapixels)'), ('SIZE_1K', '1K (min 1280x864 px @ 3:2, 1.1 Megapixels)'), ('SIZE_VGA', 'VGA (min 800x600 px @ 4:3, <1 Megapixel)'), ('SIZE_THUMB_LARGE', 'Large Thumbnail [4:3] (960×720 px)'), ('SIZE_THUMB_MEDIUM', 'Medium Thumbnail [4:3] (480×360 px)'), ('SIZE_THUMB_SMALL', 'Small Thumbnail [4:3] (240x180 px)')], max_length=64, null=True)),
                ('height', models.PositiveIntegerField(null=True, verbose_name='Height of the sized media item')),
                ('width', models.PositiveIntegerField(null=True, verbose_name='Width of the sized media item')),
                ('megapixels', models.DecimalField(decimal_places=4, max_digits=7, null=True, verbose_name='Total millions of pixels (h x w) of the image')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('media_image', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='sized_images', to='core.storagemediaimage')),
                ('storage_file', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.storagefile')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StorageMediaDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Record last update timestamp')),
                ('pages', models.PositiveIntegerField(null=True, verbose_name='Number of pages of the document')),
                ('black_and_white', models.BooleanField(verbose_name='If the document has colors (false) or is black and white (true)')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_creator', to=settings.AUTH_USER_MODEL, verbose_name='Record creation user')),
                ('media', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.storagemedia')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StorageFileDownload',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('download_url', models.CharField(max_length=1024, null=True, verbose_name='Final URL (signed) to the file to be downloaded')),
                ('force_download', models.BooleanField(default=True, verbose_name='If the URL will force the download (TRUE) or it can be embedded (FALSE)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('expires_at', models.DateTimeField(verbose_name='The expiration timestamp of the download link')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User that requested the download')),
                ('storage_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.storagefile', verbose_name='The file to be downloaded')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='storagefile',
            name='type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.storagefilemimetype'),
        ),
        migrations.AddField(
            model_name='storagefile',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_editor', to=settings.AUTH_USER_MODEL, verbose_name='Record last update user'),
        ),
    ]
