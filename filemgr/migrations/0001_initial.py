# Generated by Django 3.1 on 2020-08-05 05:07

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import filemgr.services.strings
import json.encoder
import re
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=32, verbose_name='Username of the user')),
                ('system_name', models.CharField(max_length=255, verbose_name='System name of the user')),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('registered_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('last_activity_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Last activity registered by the user in the system')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Record last update timestamp')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('AMAZON_S3', 'Amazon S3'), ('LOCAL', 'Local')], max_length=10, null=True)),
                ('credentials', models.JSONField(encoder=json.encoder.JSONEncoder, max_length=1024, verbose_name='JSON containing the credentials used for connection')),
            ],
        ),
        migrations.CreateModel(
            name='StorageFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('signature_key', models.CharField(default=filemgr.services.strings.generate_random_encoded_string, max_length=64)),
                ('status', models.CharField(choices=[('NOT_UPLOADED', 'Not Uploaded'), ('UPLOADING', 'Uploading'), ('QUEUED', 'Queued'), ('PROCESSING', 'Processing'), ('PUBLISHED', 'Published'), ('DELETED', 'Deleted'), ('ERROR', 'Error')], default='NOT_UPLOADED', max_length=50)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Public'), ('SYSTEM', 'System'), ('USER', 'User')], default='SYSTEM', max_length=50)),
                ('size', models.BigIntegerField(default=0, verbose_name='File size in bytes')),
                ('hash', models.CharField(max_length=255, null=True, verbose_name='Hash of the processed file')),
                ('metadata', models.JSONField(default=dict, verbose_name='Dict with the file metadata')),
                ('origin', models.CharField(choices=[('LOCAL', 'Local'), ('WEB', 'Web'), ('UNKNOWN', 'Unknown')], default='UNKNOWN', max_length=255)),
                ('original_path', models.CharField(max_length=1024, null=True, verbose_name='Either the original URL of the file (if remotely downloaded) or the file path (if uploaded)')),
                ('virtual_filepath', models.CharField(max_length=1024, null=True, validators=[django.core.validators.RegexValidator(code='invalid_filepath', flags=re.RegexFlag['UNICODE'], message='The informed path contains invalid characters. Please use only the set: A-Za-z0-9_-./', regex='^\\/?([\\w\\.\\_-]+\\/)*[\\w\\.\\_-]+$')])),
                ('available', models.BooleanField(default=True, verbose_name='If the file is remotely available')),
                ('excluded', models.BooleanField(default=False, verbose_name='If the file was marked as excluded in the interface')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Record last update timestamp')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='storage_file_creator', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='storage_file_owner', to=settings.AUTH_USER_MODEL)),
                ('storage', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='filemgr.storage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StorageFileImageDimensions',
            fields=[
                ('tag', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=255)),
                ('height', models.IntegerField(null=True)),
                ('width', models.IntegerField(null=True)),
                ('megapixels', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StorageFileMimeType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mime_type', models.CharField(max_length=255, unique=True)),
                ('generic_type', models.CharField(choices=[('TEXT', 'Text'), ('FONT', 'Font'), ('CODE', 'Code'), ('EXECUTABLE', 'Executable'), ('AUDIO', 'Audio'), ('IMAGE', 'Image'), ('VIDEO', 'Video'), ('COMPRESSED', 'Compressed'), ('DOCUMENT', 'Document'), ('BINARY', 'Binary'), ('OTHER', 'Other')], max_length=50, null=True)),
                ('description', models.CharField(max_length=255, null=True, verbose_name='Description of the mime-type')),
                ('extensions', models.CharField(max_length=255, null=True, verbose_name='Comma-separated list of the extensions of this mime (eg.: csv,xls,xlsx)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(editable=False, max_length=255, unique=True, verbose_name='Token used to login (from uServer-Auth)')),
                ('issued_at', models.DateTimeField(editable=False, verbose_name='Date when the token was issued by uServer-Auth')),
                ('expires_at', models.DateTimeField(editable=False, verbose_name='Date when the token expires (defined by uServer-Auth)')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User that has the token')),
            ],
        ),
        migrations.CreateModel(
            name='StorageUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('may_write', models.BooleanField(default=False, verbose_name='Storage write permission')),
                ('may_read', models.BooleanField(default=True, verbose_name='Storage read permission')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Record update timestamp')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_creator', to=settings.AUTH_USER_MODEL)),
                ('storage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='filemgr.storage')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_editor', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StorageFileImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('raw_height', models.PositiveIntegerField(null=True, verbose_name='Height of the raw media item')),
                ('raw_width', models.PositiveIntegerField(null=True, verbose_name='Width of the raw media item')),
                ('dimensions', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='filemgr.storagefileimagedimensions')),
                ('storage_file', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='filemgr.storagefile')),
            ],
        ),
        migrations.CreateModel(
            name='StorageFileDownload',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('download_url', models.CharField(default=filemgr.services.strings.generate_random_encoded_string, max_length=255, verbose_name='Final url (should be signed) to the file to be downloaded')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User that requested the download')),
                ('storage_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='filemgr.storagefile', verbose_name='The file to be downloaded')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='storagefile',
            name='type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='filemgr.storagefilemimetype'),
        ),
        migrations.AddField(
            model_name='storagefile',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='storage_file_editor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DownloadHit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField(null=True)),
                ('user_agent', models.CharField(max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Record creation timestamp')),
                ('download', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='filemgr.storagefiledownload')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
